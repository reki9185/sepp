/*
 * JOSE Protected Message Forwarding API
 *
 * N32-f Message Forwarding Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.1.2
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package JOSEProtectedMessageForwarding

import (
	"net/http"

	"github.com/free5gc/http_wrapper"
	"github.com/gin-gonic/gin"
	"github.com/yangalan0903/openapi"
	"github.com/yangalan0903/openapi/models"
	"github.com/yangalan0903/sepp/logger"
	"github.com/yangalan0903/sepp/producer"
)

// N32fProcessOptions - Discover communication options supported by next hop (IPX or SEPP)
func N32fProcessOptions(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// PostN32fProcess - N32-f Message Forwarding
func PostN32fProcess(ctx *gin.Context) {
	var n32fReformattedReqMsg models.N32fReformattedReqMsg

	requestBody, err := ctx.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.N32fForward.Errorf("Get Request Body error: %+v", err)
		ctx.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&n32fReformattedReqMsg, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.Handshake.Errorln(problemDetail)
		ctx.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := http_wrapper.NewRequest(ctx.Request, n32fReformattedReqMsg)

	rsp := producer.HandleN32forwardMessage(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.Handshake.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		ctx.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		ctx.Data(rsp.Status, "application/json", responseBody)
	}
}
