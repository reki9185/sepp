/*
 * SEPP Telescopic FQDN Mapping API
 *
 * SEPP Telescopic FQDN Mapping Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package TelescopicFqdnMapping

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method string
	// Pattern is the pattern of the URI.
	Pattern string
	// HandlerFunc is the handler function of this route.
	HandlerFunc http.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// NewRouter returns a new router.
func NewRouter() *mux.Router {
	router := mux.NewRouter()
	AddService(router)
	return router
}

func AddService(engine *mux.Router) *mux.Router {
	group := engine.PathPrefix("/n32c-handshake/v1").Subrouter() // group := engine.Subrouter("/n32c-handshake/v1")

	for _, route := range routes {
		switch route.Method {
		case "GET":
			group.HandleFunc(route.Pattern, route.HandlerFunc).Methods("GET")
			// group.GET(route.Pattern, route.HandlerFunc)
		case "POST":
			group.HandleFunc(route.Pattern, route.HandlerFunc).Methods("POST")
			// group.POST(route.Pattern, route.HandlerFunc)
		case "PUT":
			group.HandleFunc(route.Pattern, route.HandlerFunc).Methods("PUT")
			// group.PUT(route.Pattern, route.HandlerFunc)
		case "DELETE":
			group.HandleFunc(route.Pattern, route.HandlerFunc).Methods("DELETE")
			// group.DELETE(route.Pattern, route.HandlerFunc)
		case "PATCH":
			group.HandleFunc(route.Pattern, route.HandlerFunc).Methods("PATCH")
			// group.PATCH(route.Pattern, route.HandlerFunc)
		}
	}
	return group
}

// Index is the index handler.
func Index(rspWriter http.ResponseWriter, request *http.Request) {
	rspWriter.Write([]byte("Hello World!"))
	// c.String(http.StatusOK, "Hello World!")
}

var routes = Routes{
	{
		"Index",
		"GET",
		"/",
		Index,
	},

	{
		"GetTelescopicMapping",
		strings.ToUpper("Get"),
		"/mapping",
		GetTelescopicMapping,
	},
}
