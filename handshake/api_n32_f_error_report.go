/*
 * N32 Handshake API
 *
 * N32-c Handshake Service.  Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).  All rights reserved.
 *
 * API version: 1.1.2
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package handshake

import (
	"encoding/json"
	"io/ioutil"
	"net/http"

	"github.com/free5gc/http_wrapper"
	"github.com/yangalan0903/openapi"
	"github.com/yangalan0903/openapi/models"
	"github.com/yangalan0903/sepp/logger"
	"github.com/yangalan0903/sepp/producer"
)

// PostN32fError - N32-f Error Reporting Procedure
func PostN32fError(rspWriter http.ResponseWriter, request *http.Request) {
	var n32fErrorInfo models.N32fErrorInfo
	requestBody, err := ioutil.ReadAll(request.Body)
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.Handshake.Errorf("Get Request Body error: %+v", err)
		rspWriter.WriteHeader(http.StatusInternalServerError)
		rsp, err := json.Marshal(problemDetail)
		if err != nil {
			logger.Handshake.Errorf("Encode problemDetail error: %+v", err)
		}
		rspWriter.Write(rsp)
		return
	}

	err = openapi.Deserialize(&n32fErrorInfo, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rspBody := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.Handshake.Errorln(problemDetail)
		rspWriter.WriteHeader(http.StatusBadRequest)
		rsp, err := json.Marshal(rspBody)
		if err != nil {
			logger.Handshake.Errorf("Encode problemDetail error: %+v", err)
		}
		rspWriter.Write(rsp)
		return
	}
	req := http_wrapper.NewRequest(request, n32fErrorInfo)

	rsp := producer.HandleN32fErrorReport(req)
	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.Handshake.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		rspWriter.WriteHeader(http.StatusInternalServerError)
		rsp, err := json.Marshal(problemDetails)
		if err != nil {
			logger.Handshake.Errorf("Encode problemDetail error: %+v", err)
		}
		rspWriter.Write(rsp)
	} else {
		rspWriter.Header().Add("Content-Type", "application/json")
		rspWriter.WriteHeader(rsp.Status)
		rspWriter.Write(responseBody)
	}
}
